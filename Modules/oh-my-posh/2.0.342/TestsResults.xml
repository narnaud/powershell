<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="38" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2019-12-07" time="15:49:41">
  <environment user="appveyor" machine-name="APPVYR-WIN" cwd="C:\projects\oh-my-posh" user-domain="APPVYR-WIN" platform="Microsoft Windows Server 2016 Datacenter|C:\Windows|\Device\Harddisk0\Partition4" nunit-version="2.5.8.0" os-version="10.0.14393" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Powershell" name="Pester" executed="True" result="Success" success="True" time="16.0763" asserts="0">
    <results>
      <test-suite type="TestFixture" name="Test-GetBranchSymbol" executed="True" result="Success" success="True" time="9.6465" asserts="0" description="Test-GetBranchSymbol">
        <results>
          <test-case description="Has Enabled set to False" name="Test-GetBranchSymbol.Has Enabled set to False" time="8.402" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Has has no upstream" name="Test-GetBranchSymbol.Has has no upstream" time="0.14" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses GitHub" name="Test-GetBranchSymbol.Uses GitHub" time="0.4643" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses GitLab" name="Test-GetBranchSymbol.Uses GitLab" time="0.1606" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses BitBucket" name="Test-GetBranchSymbol.Uses BitBucket" time="0.2409" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses something else" name="Test-GetBranchSymbol.Uses something else" time="0.1592" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Has no remote" name="Test-GetBranchSymbol.Has no remote" time="0.0796" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Test-IsVanillaWindow" executed="True" result="Success" success="True" time="1.7308" asserts="0" description="Test-IsVanillaWindow">
        <results>
          <test-case description="runs in ConEmu and outputs 'false'" name="Test-IsVanillaWindow.runs in ConEmu and outputs 'false'" time="0.4643" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in ConEmu and outputs 'false'" name="Test-IsVanillaWindow.runs in ConEmu and outputs 'false'" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in an ANSI supported terminal and outputs 'false'" name="Test-IsVanillaWindow.runs in an ANSI supported terminal and outputs 'false'" time="0.1443" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in ConEmu and outputs 'false'" name="Test-IsVanillaWindow.runs in ConEmu and outputs 'false'" time="0.1226" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in cmder and outputs 'false'" name="Test-IsVanillaWindow.runs in cmder and outputs 'false'" time="0.1526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in cmder and conemu and outputs 'false'" name="Test-IsVanillaWindow.runs in cmder and conemu and outputs 'false'" time="0.1574" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in Hyper.js and outputs 'false'" name="Test-IsVanillaWindow.runs in Hyper.js and outputs 'false'" time="0.1565" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in vscode and outputs 'false'" name="Test-IsVanillaWindow.runs in vscode and outputs 'false'" time="0.167" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="runs in a vanilla window and outputs 'true'" name="Test-IsVanillaWindow.runs in a vanilla window and outputs 'true'" time="0.2193" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-Home" executed="True" result="Success" success="True" time="0.1839" asserts="0" description="Get-Home">
        <results>
          <test-case description="returns C:\Users\appveyor" name="Get-Home.returns C:\Users\appveyor" time="0.1839" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-Provider" executed="True" result="Success" success="True" time="0.3402" asserts="0" description="Get-Provider">
        <results>
          <test-case description="uses the provider 'AwesomeSauce'" name="Get-Provider.uses the provider 'AwesomeSauce'" time="0.3402" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-Drive" executed="True" result="Success" success="True" time="1.5673" asserts="0" description="Get-Drive">
        <results>
          <test-case description="is in the C:\Users\appveyor folder" name="Get-Drive.is in the C:\Users\appveyor folder" time="0.4564" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is somewhere in the C:\Users\appveyor folder" name="Get-Drive.is somewhere in the C:\Users\appveyor folder" time="0.2024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is in 'Microsoft.PowerShell.Core\FileSystem::\\Test\Hello' with provider X:" name="Get-Drive.is in 'Microsoft.PowerShell.Core\FileSystem::\\Test\Hello' with provider X:" time="0.1732" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is in C:" name="Get-Drive.is in C:" time="0.1662" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is has no drive" name="Get-Drive.is has no drive" time="0.168" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is has no valid path" name="Get-Drive.is has no valid path" time="0.168" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="running outside of the Filesystem in L:" name="Get-Drive.running outside of the Filesystem in L:" time="0.233" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-FullPath" executed="True" result="Success" success="True" time="0.5361" asserts="0" description="Get-FullPath">
        <results>
          <test-case description="is in the C:\Users\appveyor folder" name="Get-FullPath.is in the C:\Users\appveyor folder" time="0.3891" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is somewhere in the C:\Users\appveyor folder" name="Get-FullPath.is somewhere in the C:\Users\appveyor folder" time="0.147" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-ShortPath" executed="True" result="Success" success="True" time="0.8386" asserts="0" description="Get-ShortPath">
        <results>
          <test-case description="is in the C:\Users\appveyor folder" name="Get-ShortPath.is in the C:\Users\appveyor folder" time="0.5484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="is somewhere in the C:\Users\appveyor folder" name="Get-ShortPath.is somewhere in the C:\Users\appveyor folder" time="0.2901" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Test-NotDefaultUser" executed="True" result="Success" success="True" time="1.2328" asserts="0" description="Test-NotDefaultUser">
        <results>
          <test-case description="same username gives 'false'" name="Test-NotDefaultUser.same username gives 'false'" time="0.2865" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="different username gives 'false'" name="Test-NotDefaultUser.different username gives 'false'" time="0.0669" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="same username and outside VirtualEnv gives 'false'" name="Test-NotDefaultUser.same username and outside VirtualEnv gives 'false'" time="0.1144" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="same username and inside VirtualEnv same default user gives 'false'" name="Test-NotDefaultUser.same username and inside VirtualEnv same default user gives 'false'" time="0.1022" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="different username and inside VirtualEnv same default user gives 'true'" name="Test-NotDefaultUser.different username and inside VirtualEnv same default user gives 'true'" time="0.1285" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="no username gives 'true'" name="Test-NotDefaultUser.no username gives 'true'" time="0.2817" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="different username gives 'true'" name="Test-NotDefaultUser.different username gives 'true'" time="0.0677" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="different username and outside VirtualEnv gives 'true'" name="Test-NotDefaultUser.different username and outside VirtualEnv gives 'true'" time="0.0909" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="no username and inside VirtualEnv gives 'true'" name="Test-NotDefaultUser.no username and inside VirtualEnv gives 'true'" time="0.094" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>